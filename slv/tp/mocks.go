// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package tp

import (
	"io"
	"sync"
)

var (
	lockProgramMockCompile      sync.RWMutex
	lockProgramMockRun          sync.RWMutex
	lockProgramMockRunWithPipes sync.RWMutex
)

// ProgramMock is a mock implementation of Program.
//
//     func TestSomethingThatUsesProgram(t *testing.T) {
//
//         // make and configure a mocked Program
//         mockedProgram := &ProgramMock{
//             CompileFunc: func() (CompileResult, error) {
// 	               panic("TODO: mock out the Compile method")
//             },
//             RunFunc: func(input string) (string, error) {
// 	               panic("TODO: mock out the Run method")
//             },
//             RunWithPipesFunc: func(stdin io.ReadCloser, stdout io.WriteCloser) error {
// 	               panic("TODO: mock out the RunWithPipes method")
//             },
//         }
//
//         // TODO: use mockedProgram in code that requires Program
//         //       and then make assertions.
//
//     }
type ProgramMock struct {
	// CompileFunc mocks the Compile method.
	CompileFunc func() (CompileResult, error)

	// RunFunc mocks the Run method.
	RunFunc func(input string) (string, error)

	// RunWithPipesFunc mocks the RunWithPipes method.
	RunWithPipesFunc func(stdin io.ReadCloser, stdout io.WriteCloser) error

	// calls tracks calls to the methods.
	calls struct {
		// Compile holds details about calls to the Compile method.
		Compile []struct {
		}
		// Run holds details about calls to the Run method.
		Run []struct {
			// Input is the input argument value.
			Input string
		}
		// RunWithPipes holds details about calls to the RunWithPipes method.
		RunWithPipes []struct {
			// Stdin is the stdin argument value.
			Stdin io.ReadCloser
			// Stdout is the stdout argument value.
			Stdout io.WriteCloser
		}
	}
}

// Compile calls CompileFunc.
func (mock *ProgramMock) Compile() (CompileResult, error) {
	if mock.CompileFunc == nil {
		panic("moq: ProgramMock.CompileFunc is nil but Program.Compile was just called")
	}
	callInfo := struct {
	}{}
	lockProgramMockCompile.Lock()
	mock.calls.Compile = append(mock.calls.Compile, callInfo)
	lockProgramMockCompile.Unlock()
	return mock.CompileFunc()
}

// CompileCalls gets all the calls that were made to Compile.
// Check the length with:
//     len(mockedProgram.CompileCalls())
func (mock *ProgramMock) CompileCalls() []struct {
} {
	var calls []struct {
	}
	lockProgramMockCompile.RLock()
	calls = mock.calls.Compile
	lockProgramMockCompile.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *ProgramMock) Run(input string) (string, error) {
	if mock.RunFunc == nil {
		panic("moq: ProgramMock.RunFunc is nil but Program.Run was just called")
	}
	callInfo := struct {
		Input string
	}{
		Input: input,
	}
	lockProgramMockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	lockProgramMockRun.Unlock()
	return mock.RunFunc(input)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedProgram.RunCalls())
func (mock *ProgramMock) RunCalls() []struct {
	Input string
} {
	var calls []struct {
		Input string
	}
	lockProgramMockRun.RLock()
	calls = mock.calls.Run
	lockProgramMockRun.RUnlock()
	return calls
}

// RunWithPipes calls RunWithPipesFunc.
func (mock *ProgramMock) RunWithPipes(stdin io.ReadCloser, stdout io.WriteCloser) error {
	if mock.RunWithPipesFunc == nil {
		panic("moq: ProgramMock.RunWithPipesFunc is nil but Program.RunWithPipes was just called")
	}
	callInfo := struct {
		Stdin  io.ReadCloser
		Stdout io.WriteCloser
	}{
		Stdin:  stdin,
		Stdout: stdout,
	}
	lockProgramMockRunWithPipes.Lock()
	mock.calls.RunWithPipes = append(mock.calls.RunWithPipes, callInfo)
	lockProgramMockRunWithPipes.Unlock()
	return mock.RunWithPipesFunc(stdin, stdout)
}

// RunWithPipesCalls gets all the calls that were made to RunWithPipes.
// Check the length with:
//     len(mockedProgram.RunWithPipesCalls())
func (mock *ProgramMock) RunWithPipesCalls() []struct {
	Stdin  io.ReadCloser
	Stdout io.WriteCloser
} {
	var calls []struct {
		Stdin  io.ReadCloser
		Stdout io.WriteCloser
	}
	lockProgramMockRunWithPipes.RLock()
	calls = mock.calls.RunWithPipes
	lockProgramMockRunWithPipes.RUnlock()
	return calls
}
